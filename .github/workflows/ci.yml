name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:

  go:
    name: Go SDK
    runs-on: ubuntu-latest
    needs:
    strategy:
      matrix:
        go-version: ['1.24', '1.25']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies
      run: go mod download

    - name: Install tools
      run: make install-tools

    - name: Generate protobuf
      run: make proto

    - name: Format check
      run: |
        go fmt ./...
        if [[ $(git status --porcelain) ]]; then
          echo "Code not formatted"
          exit 1
        fi

    - name: Vet
      run: go vet ./...

    - name: Lint
      run: golangci-lint run

    - name: Build
      run: go build ./...

    - name: Test
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: go

  python:
    name: Python SDK
    runs-on: ubuntu-latest
    needs:
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      working-directory: sdks/python
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Format check
      working-directory: sdks/python
      run: black --check .

    - name: Lint
      working-directory: sdks/python
      run: ruff check .

    - name: Type check
      working-directory: sdks/python
      run: mypy .

    - name: Test
      working-directory: sdks/python
      run: pytest --cov=noesis_connectors --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./sdks/python/coverage.xml
        flags: python

  nodejs:
    name: Node.js SDK
    runs-on: ubuntu-latest
    needs:
    strategy:
      matrix:
        node-version: ['18', '20', '22']

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: sdks/node/package-lock.json

    - name: Install dependencies
      working-directory: sdks/node
      run: npm ci

    - name: Lint
      working-directory: sdks/node
      run: npm run lint

    - name: Format check
      working-directory: sdks/node
      run: npm run format:check

    - name: Type check
      working-directory: sdks/node
      run: npm run type-check

    - name: Build
      working-directory: sdks/node
      run: npm run build

    - name: Test
      working-directory: sdks/node
      run: npm test -- --coverage

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./sdks/node/coverage/lcov.info
        flags: nodejs

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Python for docs
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install docs dependencies
      working-directory: docs
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build docs
      working-directory: docs
      run: mkdocs build --strict

    - name: Test links
      working-directory: docs
      run: |
        # Add link checking here if needed
        echo "Link checking would go here"